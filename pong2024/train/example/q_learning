import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from collections import deque
import random

def extract_positions(observation):
    y_bottom = 34
    y_top = 194

    o = observation[y_bottom:y_top, :, 0]
    y_mask_left = (o[:, 19] == 213).astype(np.int32)
    y_mask_right = (o[:, 140] == 92).astype(np.int32)
    ball_mask = (o == 236).astype(np.int32)
    assert np.any(y_mask_left)
    assert np.any(y_mask_right)

    y_range = np.linspace(0, 1, y_top - y_bottom)
    x_range = np.linspace(0, 1, o.shape[1])

    y_pos_left = (y_range * y_mask_left).sum() / max(1, np.sum(y_mask_left))
    y_pos_right = (y_range * y_mask_right).sum() / max(1, np.sum(y_mask_right))

    x_ball_mask = ball_mask.max(axis=0)
    y_ball_mask = ball_mask.max(axis=1)
    x_ball = (x_range * x_ball_mask).sum() / max(1, x_ball_mask.sum())
    y_ball = (y_range * y_ball_mask).sum() / max(1, y_ball_mask.sum())
    is_ball_present = np.any(ball_mask)

    return y_pos_left, y_pos_right, x_ball, y_ball, is_ball_present

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from collections import deque
import random

class QNetwork(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(QNetwork, self).__init__()
        self.network = nn.Sequential(
            nn.Linear(input_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, output_size)
        )
    
    def forward(self, x):
        return self.network(x)

class QLearningAgent(Agent):
    def __init__(self, env, player_name=None):
        super().__init__(env, player_name)
        
        # Neural network parameters
        self.state_size = 7  # [y_pos_left, y_pos_right, x_ball, y_ball, is_ball_present, y_pos, ad_hoc]
        self.action_size = 6  # Hardcoded for Pong (NOOP, FIRE, RIGHT, LEFT, RIGHTFIRE, LEFTFIRE)
        self.hidden_size = 64
        
        # Q-learning parameters
        self.learning_rate = 0.001
        self.gamma = 0.99  # discount factor
        self.epsilon = 1.0  # exploration rate
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.995
        self.batch_size = 64
        
        # Experience replay
        self.memory = deque(maxlen=10000)
        
        # Initialize networks
        self.q_network = QNetwork(self.state_size, self.hidden_size, self.action_size)
        self.target_network = QNetwork(self.state_size, self.hidden_size, self.action_size)
        self.target_network.load_state_dict(self.q_network.state_dict())
        
        self.optimizer = optim.Adam(self.q_network.parameters(), lr=self.learning_rate)
        self.loss_fn = nn.MSELoss()
        
        # Training parameters
        self.update_target_frequency = 100
        self.training_step = 0
        
        # Store last state and action for learning
        self.last_state = None
        self.last_action = None
    
    def extract_features(self, observation):
        """Transform the raw observation into features"""
        y_pos_left, y_pos_right, x_ball, y_ball, is_ball_present = extract_positions(observation)
        y_pos = y_pos_left if self.player_name == "second_0" else y_pos_right
        
        # Additional features
        y_pos = 1.0 if self.player_name == "second_0" else 0.0
        ad_hoc = 1.0 if self.player_name == "second_0" and y_pos_left > y_ball else 0.0
        
        # Convert to tensor
        state = torch.FloatTensor([
            y_pos_left, 
            y_pos_right, 
            x_ball, 
            y_ball, 
            float(is_ball_present),
            y_pos,
            ad_hoc
        ])
        return state
    
    def choose_action(self, observation, reward=0.0, terminated=False, truncated=False, info=None):
        """Choose action using epsilon-greedy policy"""
        state = self.extract_features(observation)
        
        # Store transition in replay memory if available
        if self.last_state is not None and self.last_action is not None:
            self.memory.append((
                self.last_state,
                self.last_action,
                reward,
                state,
                terminated or truncated
            ))
        
        # Epsilon-greedy action selection
        if random.random() < self.epsilon:
            action = self.env.action_space(self.player_name).sample()
        else:
            with torch.no_grad():
                q_values = self.q_network(state)
                action = q_values.argmax().item()
        
        # Store current state and action
        self.last_state = state
        self.last_action = action
        
        # Add ad-hoc behavior based on paddle and ball positions
        y_pos = state[0].item() if self.player_name == "second_0" else state[1].item()
        y_ball = state[3].item()
        
        if not state[4].item():  # if ball is not present
            return action
        else:
            return 2 if y_pos > y_ball else 3  # ad-hoc movement based on ball position
    
    def learn(self):
        """Update the Q-network using experience replay"""
        if len(self.memory) < self.batch_size:
            return
        
        # Sample batch from memory
        batch = random.sample(self.memory, self.batch_size)
        states, actions, rewards, next_states, dones = zip(*batch)
        
        # Convert to tensors
        states = torch.stack(states)
        actions = torch.LongTensor(actions)
        rewards = torch.FloatTensor(rewards)
        next_states = torch.stack(next_states)
        dones = torch.FloatTensor(dones)
        
        # Compute Q values
        current_q_values = self.q_network(states).gather(1, actions.unsqueeze(1))
        with torch.no_grad():
            next_q_values = self.target_network(next_states).max(1)[0]
        target_q_values = rewards + (1 - dones) * self.gamma * next_q_values
        
        # Compute loss and update
        loss = self.loss_fn(current_q_values.squeeze(), target_q_values)
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()
        
        # Update target network periodically
        self.training_step += 1
        if self.training_step % self.update_target_frequency == 0:
            self.target_network.load_state_dict(self.q_network.state_dict())
        
        # Decay epsilon
        self.epsilon = max(self.epsilon_min, self.epsilon * self.epsilon_decay)
    
    def reset(self):
        """Reset agent's episode-specific variables"""
        self.last_state = None
        self.last_action = None